import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getFollowers } from './followersAPI';

const initialState = {
  followersList: [],
  currentUsername: '',
  isLoading: false,
  currentPage: 0,
  isEndOfData: false,
};

export const getNextFollowersPage = createAsyncThunk(
  'followers/nextFollowersPage',
  async (_, { getState }) => {
    const { currentUsername, currentPage} = selectFollowers(getState());
    console.log(currentPage);
    const followersList = await getFollowers(currentUsername, currentPage + 1);
    // The value we return becomes the `fulfilled` action payload
    return {
      followersList,
      currentPage: currentPage + 1,
      isEndOfData: followersList.length ? false : true,
    };
  }
);

export const newFollowersSearch = createAsyncThunk(
  'followers/newFollowersSearch',
  async (searchKey) => {
    const followersList = await getFollowers(searchKey, 1);
    // The value we return becomes the `fulfilled` action payload
    return {
      followersList,
      currentPage: 1,
      isEndOfData: followersList.length ? false : true,
      currentUsername: searchKey,
    };
  }
);

export const followersSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: { },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getNextFollowersPage.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(getNextFollowersPage.fulfilled, (state, action) => {
        const { followersList, currentPage, isEndOfData } = action.payload;
        state.isLoading = false;
        state.followersList = [...state.followersList, ...followersList];
        state.currentPage = currentPage;
        state.isEndOfData = isEndOfData;
      })
      .addCase(newFollowersSearch.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(newFollowersSearch.fulfilled, (state, action) => {
        const { followersList, isEndOfData, currentUsername } = action.payload;
        state.isLoading = false;
        state.followersList = followersList;
        state.currentPage = 1;
        state.isEndOfData = isEndOfData;
        state.currentUsername = currentUsername;
      });
  },
});

export const selectFollowers = state => state.followers;

export default followersSlice.reducer;
